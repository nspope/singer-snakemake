"""
Snakemake workflow for SINGER (github.com/popgenmethods/SINGER). Please cite
SINGER if you use this (note that I'm not an author of SINGER).

Part of https://github.com/nspope/singer-snakemake.
"""

import csv
import msprime
import tskit
import numpy as np
import allel
import matplotlib.pyplot as plt
import yaml
import pickle
import subprocess
from datetime import datetime


# ------ config ------ #

configfile: "config/example_config.yaml"

VERSION = "0.1.0"
SINGER_VERSION = "0.1.8.beta.013fe1b"  # commit of included SINGER binary

INPUT_DIR = config["input-dir"]
OUTPUT_DIR = config.get("output-dir", "results")
CHUNK_SIZE = float(config["chunk-size"])
MAX_MISSING = float(config["max-missing"])
POLARISED = bool(config["polarised"])
MUTATION_RATE = float(config["mutation-rate"])
RECOMBINATION_RATE = float(config["recombination-rate"])
MCMC_THIN = int(config["mcmc-thin"])
MCMC_SAMPLES = int(config["mcmc-samples"])
MCMC_BURNIN = int(float(config["mcmc-burnin"]) * MCMC_SAMPLES)
MCMC_RESUMES = int(config["mcmc-resumes"] * MCMC_SAMPLES)
RAND_SEED = int(config["random-seed"])
COALRATE_EPOCHS = int(config["coalrate-epochs"])
STRATIFY_BY = None if config["stratify-by"] == "None" else config["stratify-by"]
SINGER_BINARY = os.path.join(
   workflow.basedir, os.path.pardir, "resources", 
   "singer-0.1.8-beta-linux-x86_64", "singer",
)

assert MCMC_SAMPLES > 0, "Number of MCMC samples must be nonzero"
assert MCMC_BURNIN < MCMC_SAMPLES, "Burn-in exceeds number of MCMC samples"

CHROMOSOMES = config.get("chromosomes", None)
if CHROMOSOMES is None:
    CHROMOSOMES = glob_wildcards(os.path.join(INPUT_DIR, "{chrom}.vcf.gz")).chrom
    assert len(CHROMOSOMES) > 0, f"No inputs matching '{INPUT_DIR}/*.vcf.gz'"

np.random.seed(RAND_SEED)
SEED_ARRAY = {n:x for n, x in zip(CHROMOSOMES, np.random.randint(2 ** 20, size=len(CHROMOSOMES)))}

CHROM_PATH = os.path.join(OUTPUT_DIR, "{chrom}")
PLOTS_PATH = os.path.join(OUTPUT_DIR, "{chrom}", "plots")
TREES_PATH = os.path.join(OUTPUT_DIR, "{chrom}", "trees")
CHUNK_PATH = os.path.join(OUTPUT_DIR, "{chrom}", "chunks")
STATS_PATH = os.path.join(OUTPUT_DIR, "{chrom}", "stats")


# ------ rules ------ #

rule all:
    input:
        expand(os.path.join(PLOTS_PATH, "site_density.png"), chrom=CHROMOSOMES),
        expand(os.path.join(PLOTS_PATH, "diversity-scatter.png"), chrom=CHROMOSOMES),
        expand(os.path.join(PLOTS_PATH, "pair-coalescence-pdf.png"), chrom=CHROMOSOMES),
        expand(os.path.join(PLOTS_PATH, "pair-coalescence-rates.png"), chrom=CHROMOSOMES),
        expand(os.path.join(TREES_PATH, "{chrom}.{rep}.tsz"), chrom=CHROMOSOMES, rep=range(MCMC_SAMPLES)),


checkpoint chunk_chromosomes:
    """
    Chop up chromosome into chunks, adjust mutation rate to reflect missing
    data, calculate statistics in chunks, make some plots of site/missing data density.
    """
    input: 
        vcf = os.path.join(INPUT_DIR, "{chrom}.vcf.gz"),
    output:
        chunks = directory(CHUNK_PATH),
        vcf = os.path.join(CHROM_PATH, "{chrom}.vcf"),
        vcf_stats = os.path.join(CHROM_PATH, "{chrom}.vcf.stats.p"),
        vcf_strata_stats = os.path.join(CHROM_PATH, "{chrom}.vcf.strata_stats.p"),
        adjusted_mu = os.path.join(CHROM_PATH, "{chrom}.adjusted_mu.p"),
        inaccessible = os.path.join(CHROM_PATH, "{chrom}.inaccessible.p"),
        filtered = os.path.join(CHROM_PATH, "{chrom}.filtered.p"),
        metadata = os.path.join(CHROM_PATH, "{chrom}.vcf.samples.p"),
        site_density = os.path.join(PLOTS_PATH, "site_density.png"),
    log:
        log = os.path.join(CHROM_PATH, "{chrom}.log"),
    params:
        seed = lambda w: SEED_ARRAY[w.chrom],
        chunk_size = CHUNK_SIZE,
        mutation_rate = MUTATION_RATE,
        recombination_rate = RECOMBINATION_RATE,
        mcmc_samples = MCMC_SAMPLES,
        mcmc_thin = MCMC_THIN,
        polarised = POLARISED,
        max_missing = MAX_MISSING,
        stratify = STRATIFY_BY,
    script:
        "scripts/chunk_chromosomes.py"


rule run_singer:
    """
    Run SINGER chunk-by-chunk. Uses the "-resume" flag to resume sampling on
    error (see https://github.com/popgenmethods/SINGER/issues/13)
    """
    input:
        params = os.path.join(CHUNK_PATH, "{id}.yaml"),
    output:
        recombs = temp(
            expand(
                os.path.join(CHUNK_PATH, "{id}_recombs_{rep}.txt"),
                rep=range(MCMC_SAMPLES), allow_missing=True,
            )
        ),
        branches = temp(
            expand(
                os.path.join(CHUNK_PATH, "{id}_branches_{rep}.txt"),
                rep=range(MCMC_SAMPLES), allow_missing=True,
            )
        ),
        nodes = temp(
            expand(
                os.path.join(CHUNK_PATH, "{id}_nodes_{rep}.txt"),
                rep=range(MCMC_SAMPLES), allow_missing=True,
            )
        ),
        muts = temp(
            expand(
                os.path.join(CHUNK_PATH, "{id}_muts_{rep}.txt"),
                rep=range(MCMC_SAMPLES), allow_missing=True,
            )
        ),
    log:
        out = os.path.join(CHUNK_PATH, "{id}.stdout"),
        err = os.path.join(CHUNK_PATH, "{id}.stderr"),
    params:
        mcmc_resumes = MCMC_RESUMES,
        singer_binary = SINGER_BINARY,
    script:
        "scripts/run_singer.py"


def merge_chunks_params(wildcards):
    dir = checkpoints.chunk_chromosomes.get(chrom=wildcards.chrom).output.chunks
    out = expand(
        os.path.join(dir, "{id}.yaml"),
        id=glob_wildcards(os.path.join(dir, "{id}.yaml")).id
    )
    return out


def merge_chunks_input(wildcards, regex):
    dir = checkpoints.chunk_chromosomes.get(chrom=wildcards.chrom).output.chunks
    out = expand(
        os.path.join(dir, f"{{id}}_{regex}_{{rep}}.txt"),
        rep=wildcards.rep,
        id=glob_wildcards(os.path.join(dir, "{id}.yaml")).id
    )
    return out


rule merge_chunks:
    """
    Merge chunks into a single tree sequence. Adapted from `convert_long_arg.py`.
    Sets mutations.parent (https://github.com/popgenmethods/SINGER/issues/11)
    """
    input:
        ratemap = rules.chunk_chromosomes.output.adjusted_mu, 
        metadata = rules.chunk_chromosomes.output.metadata,
        params = merge_chunks_params,
        recombs = lambda w: merge_chunks_input(w, "recombs"),
        muts = lambda w: merge_chunks_input(w, "muts"),
        nodes = lambda w: merge_chunks_input(w, "nodes"),
        branches = lambda w: merge_chunks_input(w, "branches"),
    output:
        trees = os.path.join(TREES_PATH, "{chrom}.{rep}.tsz"),
    params:
        stratify = STRATIFY_BY,
        version = {"pipeline": VERSION, "singer": SINGER_VERSION},
    script:
        "scripts/merge_chunks.py"


rule tree_statistics:
    """
    Calculate per-chunk branch statistics ("fitted values") across MCMC iterations
    """
    input:
        inaccessible = rules.chunk_chromosomes.output.inaccessible,
        filtered = rules.chunk_chromosomes.output.filtered,
        trees = rules.merge_chunks.output.trees,
    output:
        stats = os.path.join(STATS_PATH, "{chrom}.{rep,[0-9]+}.stats.p"),
        strata_stats = os.path.join(STATS_PATH, "{chrom}.{rep,[0-9]+}.strata_stats.p"),
    params:
        mutation_rate = MUTATION_RATE,
        stratify = STRATIFY_BY,
    script:
        "scripts/tree_statistics.py"


def diagnostics_input(wildcards, regex):
    dir = f"{OUTPUT_DIR}/{wildcards.chrom}/stats"
    out = expand(
        os.path.join(dir, f"{{chrom}}.{{rep}}.{regex}.p"),
        chrom=wildcards.chrom,
        rep=range(MCMC_SAMPLES),
    )
    return out


rule diagnostics:
    """
    Make some diagnostic plots per chromosome comparing branch and site
    statistics.
    """
    input:
        ratemap = rules.chunk_chromosomes.output.adjusted_mu,
        vcf_stats = rules.chunk_chromosomes.output.vcf_stats,
        vcf_strata_stats = rules.chunk_chromosomes.output.vcf_strata_stats,
        stats = lambda w: diagnostics_input(w, "stats"),
        strata_stats = lambda w: diagnostics_input(w, "strata_stats"),
    output:
        diversity_scatter = os.path.join(PLOTS_PATH, "diversity-scatter.png"),
        diversity_trace = os.path.join(PLOTS_PATH, "diversity-trace.png"),
        diversity_skyline = os.path.join(PLOTS_PATH, "diversity-skyline.png"),
        tajima_d_scatter = os.path.join(PLOTS_PATH, "tajima-d-scatter.png"),
        tajima_d_trace = os.path.join(PLOTS_PATH, "tajima-d-trace.png"),
        tajima_d_skyline = os.path.join(PLOTS_PATH, "tajima-d-skyline.png"),
        folded_afs = os.path.join(PLOTS_PATH, "folded-afs.png"),
        unfolded_afs = os.path.join(PLOTS_PATH, "unfolded-afs.png"),
    params:
        mcmc_samples = MCMC_SAMPLES,
        mcmc_burnin = MCMC_BURNIN,
        confidence_level = 0.0,
        stratify = STRATIFY_BY,
    script:
        "scripts/diagnostics.py"


rule coalescence_rates:
    """
    Calculate pair/cross coalescence rates across MCMC iterations.
    Rates are calculated within logarithmically-spaced time bins.
    """
    input:
        inaccessible = rules.chunk_chromosomes.output.inaccessible,
        trees = rules.merge_chunks.output.trees
    output:
        coalrate = os.path.join(STATS_PATH, "{chrom}.{rep,[0-9]+}.coalrate.p"),
        crossrate = os.path.join(STATS_PATH, "{chrom}.{rep,[0-9]+}.crossrate.p"),
    params:
        coalrate_epochs = COALRATE_EPOCHS,
        stratify = STRATIFY_BY,
    script:
        "scripts/coalescence_rates.py"


def plot_coalescence_rates_input(wildcards, what):
    dir = f"{OUTPUT_DIR}/{wildcards.chrom}/stats"
    out = expand(
        os.path.join(dir, f"{{chrom}}.{{rep}}.{what}.p"),
        chrom=wildcards.chrom,
        rep=range(MCMC_SAMPLES),
    )
    return out


rule plot_coalescence_rates:
    """
    Plot distributions of pair coalescence times.
    """
    input:
        ratemap = rules.chunk_chromosomes.output.adjusted_mu,
        coalrate = lambda w: plot_coalescence_rates_input(w, "coalrate"),
        crossrate = lambda w: plot_coalescence_rates_input(w, "crossrate"),
    output:
        pair_coalescence_pdf = os.path.join(PLOTS_PATH, "pair-coalescence-pdf.png"),
        pair_coalescence_rates = os.path.join(PLOTS_PATH, "pair-coalescence-rates.png"),
    params:
        coalrate_epochs = COALRATE_EPOCHS,
        stratify = STRATIFY_BY,
        mcmc_samples = MCMC_SAMPLES,
        mcmc_burnin = MCMC_BURNIN,
    script:
        "scripts/plot_coalescence_rates.py"
